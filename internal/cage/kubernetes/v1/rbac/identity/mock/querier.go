// Copyright (C) 2020 The CodeActual Go Environment Authors.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//

// Code generated by MockGen. DO NOT EDIT.

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	core "github.com/codeactual/kubeauth/internal/cage/kubernetes/v1/core"
	identity "github.com/codeactual/kubeauth/internal/cage/kubernetes/v1/rbac/identity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockQuerier is a mock of Querier interface
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// String mocks base method
func (m *MockQuerier) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockQuerierMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockQuerier)(nil).String))
}

// Compatible mocks base method
func (m *MockQuerier) Compatible(arg0 *identity.Query) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compatible", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Compatible indicates an expected call of Compatible
func (mr *MockQuerierMockRecorder) Compatible(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compatible", reflect.TypeOf((*MockQuerier)(nil).Compatible), arg0)
}

// Do mocks base method
func (m *MockQuerier) Do(arg0 context.Context, arg1 *core.Clientset, arg2 *identity.Query) (*identity.IdentityList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1, arg2)
	ret0, _ := ret[0].(*identity.IdentityList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockQuerierMockRecorder) Do(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockQuerier)(nil).Do), arg0, arg1, arg2)
}
