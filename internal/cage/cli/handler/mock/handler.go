// Copyright (C) 2020 The CodeActual Go Environment Authors.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//

// Code generated by MockGen. DO NOT EDIT.

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	os "os"
	reflect "reflect"
)

// MockSession is a mock of Session interface
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// Err mocks base method
func (m *MockSession) Err() io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockSessionMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockSession)(nil).Err))
}

// In mocks base method
func (m *MockSession) In() io.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "In")
	ret0, _ := ret[0].(io.Reader)
	return ret0
}

// In indicates an expected call of In
func (mr *MockSessionMockRecorder) In() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "In", reflect.TypeOf((*MockSession)(nil).In))
}

// OnSignal mocks base method
func (m *MockSession) OnSignal(s os.Signal, do func(os.Signal)) func() {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnSignal", s, do)
	ret0, _ := ret[0].(func())
	return ret0
}

// OnSignal indicates an expected call of OnSignal
func (mr *MockSessionMockRecorder) OnSignal(s, do interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnSignal", reflect.TypeOf((*MockSession)(nil).OnSignal), s, do)
}

// Out mocks base method
func (m *MockSession) Out() io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Out")
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// Out indicates an expected call of Out
func (mr *MockSessionMockRecorder) Out() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Out", reflect.TypeOf((*MockSession)(nil).Out))
}

// SetErr mocks base method
func (m *MockSession) SetErr(arg0 io.Writer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", arg0)
}

// SetErr indicates an expected call of SetErr
func (mr *MockSessionMockRecorder) SetErr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockSession)(nil).SetErr), arg0)
}

// SetIn mocks base method
func (m *MockSession) SetIn(arg0 io.Reader) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIn", arg0)
}

// SetIn indicates an expected call of SetIn
func (mr *MockSessionMockRecorder) SetIn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIn", reflect.TypeOf((*MockSession)(nil).SetIn), arg0)
}

// SetOut mocks base method
func (m *MockSession) SetOut(arg0 io.Writer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOut", arg0)
}

// SetOut indicates an expected call of SetOut
func (mr *MockSessionMockRecorder) SetOut(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOut", reflect.TypeOf((*MockSession)(nil).SetOut), arg0)
}

// ExitOnErr mocks base method
func (m *MockSession) ExitOnErr(err error, msg string, code int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExitOnErr", err, msg, code)
}

// ExitOnErr indicates an expected call of ExitOnErr
func (mr *MockSessionMockRecorder) ExitOnErr(err, msg, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitOnErr", reflect.TypeOf((*MockSession)(nil).ExitOnErr), err, msg, code)
}

// ExitOnErrShort mocks base method
func (m *MockSession) ExitOnErrShort(err error, msg string, code int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExitOnErrShort", err, msg, code)
}

// ExitOnErrShort indicates an expected call of ExitOnErrShort
func (mr *MockSessionMockRecorder) ExitOnErrShort(err, msg, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitOnErrShort", reflect.TypeOf((*MockSession)(nil).ExitOnErrShort), err, msg, code)
}

// ExitOnErrsShort mocks base method
func (m *MockSession) ExitOnErrsShort(errs []error, code int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExitOnErrsShort", errs, code)
}

// ExitOnErrsShort indicates an expected call of ExitOnErrsShort
func (mr *MockSessionMockRecorder) ExitOnErrsShort(errs, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitOnErrsShort", reflect.TypeOf((*MockSession)(nil).ExitOnErrsShort), errs, code)
}

// Exitf mocks base method
func (m *MockSession) Exitf(code int, format string, a ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{code, format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	m.ctrl.Call(m, "Exitf", varargs...)
}

// Exitf indicates an expected call of Exitf
func (mr *MockSessionMockRecorder) Exitf(code, format interface{}, a ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{code, format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exitf", reflect.TypeOf((*MockSession)(nil).Exitf), varargs...)
}
